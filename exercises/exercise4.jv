pipeline TemperatureMeasurementPipeline {

    DataExtractor
    -> ZipFileInterpreter
    -> CSVFilePicker
    -> TextFileInterpreter
    -> CSVFileInterpreter
    -> DeleteUnusedColumns
    -> RenameColumnHeaders
    -> DataStructureInterpreter
    -> TemperatureTransformer
    -> BatteryTemperatureTransformer
    -> LoadToDatabase;

    block DataExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipFileInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block CSVFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TextFileInterpreter oftype TextFileInterpreter {

    }

    block CSVFileInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block DeleteUnusedColumns oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    block RenameColumnHeaders oftype CellWriter {
        at: range A1:F1;
        write: ['id', 'producer', 'model', 'month', 'temperature', 'battery_temperature'];
    }

    block DataStructureInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype ValidMonth,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block TemperatureTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block BatteryTemperatureTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    block LoadToDatabase oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

valuetype PositiveInteger oftype integer {
    constraints: [PositiveConstraint];
}

constraint PositiveConstraint oftype RangeConstraint {
    lowerBound: 1;
}

valuetype ValidMonth oftype integer {
    constraints: [MonthRange];
}

constraint MonthRange oftype RangeConstraint {
    lowerBound: 1;
    upperBound: 12;
    upperBoundInclusive: true;
}
